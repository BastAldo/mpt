commit_message: "docs: Create foundational architecture and API contract"
rationale: |
  This commit establishes the strategic foundation for the new project.

  1.  **Architectural Blueprint**: Creates `docs/ARCHITECTURE.md` to formally document the 3-repository architecture.
  2.  **API Contract**: Creates `docs/API_CONTRACT.md` to define the frontend-backend communication contract.

  This corrected patch adheres to the simple `file`/`content` structure required by the patcher script.
patches:
  - file: "docs/ARCHITECTURE.md"
    content: |
      # Project Architecture

      *Status: Approved*

      ## 1. Overview

      This project adopts a **multi-repo** architecture based on three distinct and specialized repositories. This decision was made to apply the **Principle of Maximum Granularity** and to proactively address the constraints related to the AI assistant's context window during development.

      The three repositories are:

      1.  **`mio_trainer_docs`**: The strategic brain. It contains all documentation, specifications, and the API contract. It is the Single Source of Truth for the design.
      2.  **`mio_trainer_api`**: The engine. It contains the backend implementation (API server) in Rust with Axum.
      3.  **`mio_trainer_app`**: The interface. It contains the frontend implementation (WASM) in Rust with Leptos.

      ## 2. Workflow

      Development is contract-driven. Any new feature requiring communication between the frontend and backend must first be defined and approved in the `API_CONTRACT.md` file within the `mio_trainer_docs` repository.

  - file: "docs/API_CONTRACT.md"
    content: |
      # API Contract v1

      This document defines the application programming interface (API) for "Mio Trainer Personale". The frontend and backend MUST strictly adhere to these specifications.

      **Base URL:** `(to be defined)`

      ---

      ## Common Data Types

      ### Workout
      ```json
      {
        "date": "YYYY-MM-DD",
        "items": [
          // Array of Exercise or Rest objects
        ]
      }
      ```

      ### Exercise
      ```json
      {
        "type": "exercise",
        "name": "Exercise Name",
        "duration": 60 // in seconds
      }
      ```

      ### Rest
      ```json
      {
        "type": "rest",
        "duration": 30 // in seconds
      }
      ```

      ---

      ## Endpoints

      *(No endpoints defined yet)*